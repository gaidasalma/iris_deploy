# -*- coding: utf-8 -*-
"""Untitled0.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1xt1RYidCRqEgFwV2BeFPyXgxpvtlWtoj
"""

import streamlit as st
import pandas as pd
import numpy as np
import pickle
from sklearn.datasets import load_iris
import matplotlib.pyplot as plt
import seaborn as sns

# Load model
with open("model.pkl", "rb") as f:
    model = pickle.load(f)

# Load dataset
iris = load_iris()
df = pd.DataFrame(iris.data, columns=iris.feature_names)
df["target"] = iris.target
df["target_name"] = df["target"].apply(lambda x: iris.target_names[x])

# Page configuration
st.set_page_config(page_title="Iris Classifier", layout="centered")

# Sidebar navigation
page = st.sidebar.radio("Go to", ["Data Description", "Prediction", "Visualization"])

# Page 1: Data Description
if page == "Data Description":
    st.title("üå∏ Iris Dataset Description")
    st.markdown("The Iris dataset consists of 150 samples of iris flowers from three species:")
    st.markdown("- Setosa\n- Versicolor\n- Virginica")
    st.write("Here‚Äôs a preview of the dataset:")
    st.dataframe(df.head())
    st.markdown("### Feature Description")
    st.markdown("- Sepal length (cm)\n- Sepal width (cm)\n- Petal length (cm)\n- Petal width (cm)")

# Page 2: Prediction
elif page == "Prediction":
    st.title("üîç Iris Species Prediction")

    st.markdown("Enter the measurements below:")

    sepal_length = st.slider("Sepal Length (cm)", 4.0, 8.0, 5.1)
    sepal_width = st.slider("Sepal Width (cm)", 2.0, 4.5, 3.5)
    petal_length = st.slider("Petal Length (cm)", 1.0, 7.0, 1.4)
    petal_width = st.slider("Petal Width (cm)", 0.1, 2.5, 0.2)

    input_data = np.array([[sepal_length, sepal_width, petal_length, petal_width]])

    if st.button("Predict"):
        prediction = model.predict(input_data)[0]
        species = iris.target_names[prediction]
        st.success(f"The predicted species is **{species}** üåº")

# Page 3: Visualization
elif page == "Visualization":
    st.title("üìä Iris Data Visualization")

    st.markdown("Explore feature distributions and relationships.")

    col1, col2 = st.columns(2)

    with col1:
        st.subheader("Pairplot")
        fig = sns.pairplot(df, hue="target_name")
        st.pyplot(fig)

    with col2:
        st.subheader("Correlation Heatmap")
        corr = df.iloc[:, :4].corr()
        fig, ax = plt.subplots()
        sns.heatmap(corr, annot=True, cmap="Blues", ax=ax)
        st.pyplot(fig)